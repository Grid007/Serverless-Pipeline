version: 0.2

phases:
  install:
    commands:
      - pip install --upgrade pip
  build:
    commands:
      # Package ValidatorLambda
      - cd lambdas/ValidatorLambda
      - zip -r ../../ValidatorLambda.zip .
      - cd ../..  # Navigate back to the project root directory
      - |
        aws cloudformation package \
          --template-file lambda_cf_template.yaml \
          --s3-bucket pipeline-cicd-serverless \
          --output-template-file ValidatorPackagedTemplate.yaml

      # Package DataLoaderLambda
      - cd lambdas/DataLoaderLambda
      - zip -r ../../DataLoaderLambda.zip .
      - cd ../..  # Navigate back to the project root directory
      - |
        aws cloudformation package \
          --template-file lambda_cf_template.yaml \
          --s3-bucket pipeline-cicd-serverless \
          --output-template-file DataLoaderPackagedTemplate.yaml

      # Package LoadUniversitiesLambda
      - cd lambdas/LoadUniversitiesLambda
      - zip -r ../../LoadUniversitiesLambda.zip .
      - cd ../..  # Navigate back to the project root directory
      - |
        aws cloudformation package \
          --template-file lambda_cf_template.yaml \
          --s3-bucket pipeline-cicd-serverless \
          --output-template-file UniversitiesPackagedTemplate.yaml
      
       # Build Docker image for Fargate
      - echo "Building Docker image for Fargate..."
      - cd fargate
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo Building the Docker image...
      - docker build -t $ECR_REPOSITORY_NAME:latest .
      - docker tag $ECR_REPOSITORY_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest
      - echo Pushing the Docker image to ECR...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME:latest
      - cd ..
      
      # Upload Step Function flow.json
      - aws s3 cp step-function/flow.json s3://pipeline-cicd-serverless/step-function/flow.json


artifacts:
  files:
    - ValidatorPackagedTemplate.yaml
    - ValidatorLambda.zip
    - DataLoaderPackagedTemplate.yaml
    - DataLoaderLambda.zip
    - UniversitiesPackagedTemplate.yaml
    - LoadUniversitiesLambda.zip
    - lambda_cf_template.yaml  
